#!/bin/bash
#
# rails-post-deploy
# For Ruby on Rails, run this in exec_extras in vhosts.pl. It migrates the db to the most
# recent version.
#
# Copyright (c) 2010 UK Citizens Online Democracy. All rights reserved.
# Email: louise@mysociety.org; WWW: http://www.mysociety.org/
#
# $Id: $
#

set -e
#set -x # debug

APP_DIR=`pwd`

# make sure that there is an app directory, so are in a rails app tree
cd app/..

# read config file in for later (STAGING_SITE)
if [ -e "config/general" ] || [ -e "config/general.yml" ]
then
    . commonlib/shlib/deployfns
    read_conf config/general
else
    OPTION_DOMAIN=127.0.0.1:3000
    OPTION_STAGING_SITE=1
fi

# create initial log files
if [ -e $APP_DIR/../logs ]
then
    # mySociety servers have logs dir in level above
    rm -f log
    ln -s $APP_DIR/../logs log
else
    # otherwise just make the directory
    if [ -h log ]
    then
        # remove any old-style symlink first
        rm -f log
    fi
    mkdir -p log
fi
cd log
touch development.log fastcgi.crash.log production.log test.log
cd ..

# Force appropriate environment (via a hack in config/boot.rb which needs
# applying to your rails app, see foi/config/boot.rb)
if [ ! -e "config/rails_env.rb" ]
then
    cat <<END

***************************************************************** 
WARNING: About to make config/rails_env.rb which, via special
code in config/boot.rb, forces the Rails environment to be a
particular one - this is used for the mySociety deployment
system. You don't want it for local development, because it will 
not work in a confusing way you try and use two environments
(e.g. development and test) in the same working directory.
***************************************************************** 

END
fi
if [ "$OPTION_STAGING_SITE" = "0" ]
then
    echo "ENV['RAILS_ENV'] = 'production'" > config/rails_env.rb
elif [[ "$OPTION_DOMAIN" == *"test"* ]]
then
    echo "ENV['RAILS_ENV'] = 'test'" > config/rails_env.rb
else
    echo "ENV['RAILS_ENV'] = 'development'" > config/rails_env.rb
fi

# build any native gems
rake gems:build
# upgrade database
rake db:migrate #--trace
# redeploy any cached assets
rake cached_assets:minify
rake cached_assets:regenerate
# reload the guides, in case they have changed
rake guides:add_static_guides
